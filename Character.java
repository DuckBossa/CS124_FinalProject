import java.awt.geom.Rectangle2D;
public abstract class Character{
	public int atk;
	public int def;
	public int hp;
	public int exp;
	public int vx,vy;
	public int x,y,w,h;
	public int lvl;
	public int face;
	public int seq;
	public int maxhp;
	public int charge;
	public boolean attacking;
	public Rectangle2D hitbox;

	public Character(int atk, int def, int vx, int vy, int x, int y,int w, int h, int lvl){
		this.atk = atk;
		this.def = def;
		this.vx = vx;
		this.vy = vy;
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
		this.lvl = lvl;
		hp = lvl*10;
		maxhp = hp;
		exp = 0;
		charge = 0;
		face = 0;
		seq = 1;
		attacking = false;
		hitbox = new Rectangle2D.Double(x,y,w,h);
	}

	public enum Movement{
		UP(0),LEFT(1),DOWN(2),RIGHT(3),ATTACK(4),;
		private int code;
		private Movement(int code){
			this.code = code;
		}
		public int getCode(){
			return code;
		}
	}

	public void move(int dir){
		if(!attacking){
			if(dir == Movement.UP.getCode()){
				y-=vy;
			}
			else if(dir == Movement.DOWN.getCode()){
				y+=vy;
			}
			else if(dir == Movement.LEFT.getCode()){
				x-= vx;
			}
			else if(dir == Movement.RIGHT.getCode()){
				x+= vx;
			}
			else if(dir == Movement.ATTACK.getCode()){
				attacking = true;
				seq = 0;
				updateRectangle();
				return;
			}
			if(dir == face){
				seq++;
				if(seq > 3)
					seq = 0;
			}
			else{
				seq = 0;
				face = dir;
			}
		}
		else{
			seq++;
			if(seq > 3){
				seq = 0;
				attacking = false;
			}
		}
		updateRectangle();
	}


	public abstract Rectangle2D attack();

	public boolean collide(Rectangle2D e){ // can be used for collision with arrows and rectangles generated by attacks
		if(hitbox.intersects(e))
			return true;
		else 
			return false;
	}

	public void updateRectangle(){
		hitbox.setRect(x,y,w,h);
	}

	public void levelUp(){
		hp = ++lvl * 10;
		atk++;
		def++;
		maxhp = hp; 
	}

	public void gainExp(int amount){
		exp += amount;
		if(exp >= lvl){
			levelUp();
			exp = 0;
		}
	}

	public void takeDamage(int damage){
		if(damage - def <= 0)
			hp--;
		else{
			hp -= (damage - def);
		}
	}

	public boolean isAlive(){
		return (hp >= 0);
	}

}